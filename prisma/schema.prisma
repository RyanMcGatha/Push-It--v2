generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  messages      Message[]
  chats         ChatParticipant[]
  notifications Notification[]
  sentFriendRequests     Friendship[] @relation("SentFriendRequests")
  receivedFriendRequests Friendship[] @relation("ReceivedFriendRequests")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id              String    @id @default(cuid())
  userId          String    @unique
  bio             String?   @db.Text
  location        String?
  website         String?
  twitterHandle   String?
  githubHandle    String?
  company         String?
  jobTitle        String?
  phoneNumber     String?
  displayName     String?
  profileComplete Boolean   @default(false)
  onboardingComplete Boolean @default(false)
  onboardingStep    String? @default("welcome") // Possible values: welcome, personalization, features, completion
  // New creative fields
  customUrl      String?   @unique
  themeColor     String?
  bannerImage    String?
  layout         String?
  skills         String[]
  achievements   String[]
  customSections Json?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Chat {
  id          String    @id @default(cuid())
  name        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  messages    Message[]
  participants ChatParticipant[]
}

model Message {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chatId    String
  userId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChatParticipant {
  id        String   @id @default(cuid())
  userId    String
  chatId    String
  joinedAt  DateTime @default(now())
  muted     Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String   @db.Text
  type      String   // e.g., 'message', 'system', 'alert'
  read      Boolean  @default(false)
  count     Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Friendship {
  id        String   @id @default(cuid())
  senderId  String
  receiverId String
  status    String   // 'pending', 'accepted', 'rejected'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sender    User     @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver  User     @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
}
